import numpy as np

def gradient_descent(x, y):
    m_curr = b_curr = 0
    n = len(x)
    iterations = 1000
    learning_rate = 0.01

    for i in range(iterations):
        y_predicted = m_curr * x + b_curr
        cost = (1/n) * sum((y - y_predicted) ** 2)
        md = -(2/n) * sum(x * (y - y_predicted))
        bd = -(2/n) * sum(y - y_predicted)
        m_curr = m_curr - learning_rate * md
        b_curr = b_curr - learning_rate * bd
        if i % 100 == 0:  # Print every 100 iterations to reduce output
            print("m {}, b {}, cost {}, iterations {}".format(m_curr, b_curr, cost, i))

    return m_curr, b_curr

x = np.array([1, 2, 3, 4, 5])
y = np.array([5, 6, 7, 8, 11])

gradient_descent(x, y)
