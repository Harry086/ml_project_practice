#categorical variables
.nominnal:male,female  green,redd,blue
.ordinal:grade,master,phd

#one hot encoding:

import pandas as pd
df = pd.read_csv("homeprices.csv")
df

#Using pandas to create dummy variables
dummies = pd.get_dummies(df.town)
dummies

#merging
merged = pd.concat([df,dummies],axis='columns')
merged
final = merged.drop(['town'], axis='columns')
final

#sklearn library takes care of dummy variable trap hence even if you don't drop one of the state columns it is going to work, however we should make a habit of taking care of dummy variable trap ourselves just in case library that you are using is not handling this for you

final = final.drop(['west windsor'], axis='columns')
final

#initialising x and y values
X = final.drop('price', axis='columns')
X
y = final.price

#importing reg 
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X,y)
model.predict(X) # 2600 sqr ft home in new jersey

#checking the accurasy of model
model.score(X,y)

#Using sklearn OneHotEncoder
First step is to use label encoder to convert town names into numbers

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
dfle = df
dfle.town = le.fit_transform(dfle.town)
dfle

X = dfle[['town','area']].values
X
y = dfle.price.values
y

#transform column to digits
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
ct = ColumnTransformer([('town', OneHotEncoder(), [0])], remainder = 'passthrough')
X = ct.fit_transform(X)
X

model.fit(X,y)
model.predict([[0,1,3400]]) # 3400 sqr ft home in west windsor




